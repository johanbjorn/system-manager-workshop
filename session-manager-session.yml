
AWSTemplateFormatVersion: 2010-09-09

# This CloudFormation template deploys the VPC, network and resources needed
# for the MGT406-R & MGT406-R1 builder sessions at re:Invent.

Parameters:
  LatestLinuxAmiId:
    Type: 'AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>'
    Default: '/aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2'

  LatestWindowsAmiId:
    Type: 'AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>'
    Default: '/aws/service/ami-windows-latest/Windows_Server-2019-English-Core-Base'

Resources:
  # Create S3 bucket for session logging.
  LoggingBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Join ['-', ["session-manager-demo", !Ref "AWS::AccountId", !Ref "AWS::Region"]]
      BucketEncryption:
        ServerSideEncryptionConfiguration:
        - ServerSideEncryptionByDefault:
            SSEAlgorithm: AES256

  # Managed instance security group.
  InstanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "Security group for Session Manager POC instances."
      GroupName: "session-manager-demo"
      SecurityGroupEgress:
        - CidrIp: "0.0.0.0/0"
          IpProtocol: "-1"
      VpcId:
        Ref: "VPC"

  # Production Linux instance.
  ProductionLinuxInstance:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: !Ref LatestLinuxAmiId
      InstanceType: "t2.micro"
      IamInstanceProfile: !Ref SystemsManagerProfile
      NetworkInterfaces:
      - DeviceIndex: '0'
        SubnetId: !Ref PublicSubnetA
        GroupSet: [!Ref InstanceSecurityGroup]
      Tags:
      - Key: Name
        Value: "session-manager-linux-prod"
      - Key: Environment
        Value: "Production"

  # Stage Linux instance.
  StageLinuxInstance:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: !Ref LatestWindowsAmiId
      InstanceType: "t2.micro"
      IamInstanceProfile: !Ref SystemsManagerProfile
      NetworkInterfaces:
      - DeviceIndex: '0'
        SubnetId: !Ref PublicSubnetB
        GroupSet: [!Ref InstanceSecurityGroup]
      Tags:
      - Key: Name
        Value: "session-manager-linux-stage"
      - Key: Environment
        Value: "Stage"

  # Production Windows instance.
  ProductionWindowsInstance:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: !Ref LatestWindowsAmiId
      InstanceType: "t2.micro"
      IamInstanceProfile: !Ref SystemsManagerProfile
      NetworkInterfaces:
      - DeviceIndex: '0'
        SubnetId: !Ref PublicSubnetB
        GroupSet: [!Ref InstanceSecurityGroup]
      Tags:
      - Key: Name
        Value: "session-manager-windows-prod"
      - Key: Environment
        Value: "Production"

  # Stage Windows instance.
  StageWindowsInstance:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: !Ref LatestWindowsAmiId
      InstanceType: "t2.micro"
      IamInstanceProfile: !Ref SystemsManagerProfile
      NetworkInterfaces:
      - DeviceIndex: '0'
        SubnetId: !Ref PublicSubnetA
        GroupSet: [!Ref InstanceSecurityGroup]
      Tags:
      - Key: Name
        Value: "session-manager-windows-stage"
      - Key: Environment
        Value: "Stage"

  # IAM role to grant default Systems Manager permissions.
  SystemsManagerRole:
    Type: "AWS::IAM::Role"
    Properties:
      RoleName: "session-manager-demo-default"
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          -
            Effect: "Allow"
            Principal:
              Service:
                - "ec2.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Path: "/"

  SystemsManagerProfile:
    Type: "AWS::IAM::InstanceProfile"
    Properties:
      InstanceProfileName: "session-manager-demo-default"
      Path: "/"
      Roles:
        -
          Ref: "SystemsManagerRole"

  SessionManagerGroup:
    Type: AWS::IAM::Group
    Properties:
      GroupName: session-manager-demo-default
      Path: "/"

  SessionManagerDemoUser:
    Type: AWS::IAM::User
    Properties:
      Groups:
        - !Ref SessionManagerGroup
      Path: "/"
      UserName: session-manager-demo-user

  SessionManagerUserPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: "session-manager-user-policy"
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          -
            Effect: "Allow"
            Action:
              - "ssm:StartSession"
            Resource: "*"
          -
            Effect: "Allow"
            Action:
              - "ssm:DescribeSessions"
              - "ssm:GetConnectionStatus"
              - "ssm:DescribeInstanceProperties"
              - "ec2:DescribeInstances"
            Resource: "*"
          -
            Effect: "Allow"
            Action:
              - "ssm:GetDocument"
            Resource: !Join [':', ["arn:aws:ssm", !Ref "AWS::Region", !Ref "AWS::AccountId", "document/SSM-SessionManagerRunShell"]]
          -
            Effect: "Allow"
            Action:
              - "ssm:TerminateSession"
            Resource: "arn:aws:ssm:*:*:session/${aws:username}-*"
          -
            Effect: "Allow"
            Action:
              - "kms:GenerateDataKey"
            Resource: !Join [':', ["arn:aws:kms", !Ref "AWS::Region", !Ref "AWS::AccountId", "key/REPLACE-WITH-KEY-ID"]]
      Groups:
        -
          Ref: "SessionManagerGroup"

  # Create baseline VPC.
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.1.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
      - Key: Name
        Value: !Sub ${AWS::StackName}

  # Provide the VPC with Internet access.
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    DependsOn: VPC
  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  # Create 2 public subnets.
  PublicSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.1.10.0/24
      MapPublicIpOnLaunch: true
      AvailabilityZone: !Select [ 0, !GetAZs ] # Get the first AZ in the list.
      Tags:
      - Key: Name
        Value: !Sub ${AWS::StackName}-Public-A
  PublicSubnetB:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.1.20.0/24
      MapPublicIpOnLaunch: true
      AvailabilityZone: !Select [ 1, !GetAZs ] # Get the second AZ in the list
      Tags:
      - Key: Name
        Value: !Sub ${AWS::StackName}-Public-B

  # Create public route table.
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: Public
  PublicRoute1:
    Type: AWS::EC2::Route
    DependsOn: AttachGateway
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  # Attach the public subnets to public route table.
  PublicSubnetARouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnetA
      RouteTableId: !Ref PublicRouteTable
  PublicSubnetBRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnetB
      RouteTableId: !Ref PublicRouteTable

Outputs:
  VPC:
    Description: VPC of the base network.
    Value: !Ref VPC
    Export:
      Name: !Sub ${AWS::StackName}
  LoggingBucket:
    Description: S3 Bucket for Session Manager Logging.
    Value: !Ref LoggingBucket
    Export:
      Name: !Join ['-', ["session-manager-demo", !Ref "AWS::AccountId", !Ref "AWS::Region"]]
